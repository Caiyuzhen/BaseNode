// Fs 模块
const fs = require('fs')



// 新增文件 ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// 写入文件 (⚡️异步, 性能比较好)
fs.writeFile('./一个文件.txt', '内容内容', err=>{ //文件路径, 内容, 回调函数
	if(err) {
		console.log('写入失败')
		return
	}
	console.log(err)
})



// 写入文件 (⚡️同步)
fs.writeFileSync('./一个同步的文件.txt', '同步文件的内容')



// 追加文件 (⚡️异步, 性能比较好)
fs.appendFile('./一个文件.txt', '\r\n追加的内容', {flag: 'a'}, err=>{ // \r\n 表示换行, 第三个参数 {flag: 'a'} 表示追加的而非覆盖
	if(err) {
		console.log('写入失败')
		return
	}
	console.log(err)
})



// 追加文件 (⚡️同步)
fs.appendFileSync('./一个同步的文件.txt', '同步文件的追加内容')




// 📺 流式的写入 (适合写入频率较高 & 大文件的场景)
const ws = fs.createWriteStream('./一个流式的文件.txt') //【🔋 第一步】建立通道
ws.write('第 1 句话\r\n') //【🔋 第二步】写入内容
ws.write('第 2 句话\r\n')
ws.write('第 3 句话\r\n')
ws.write('第 4 句话')

ws.close() //【🔋 第三步】关闭通道






// 读取文件 ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// 读取文件 (⚡️异步, 性能比较好)
fs.readFile('./一个文件.txt', 'utf8', (err, data)=>{ //文件路径, 编码格式, 回调函数
	if(err) {
		console.log('写入失败')
		return
	}
	console.log('读取出了:',data.toString())
})



// 读取文件 （⚡️同步）
let data = fs.readFileSync('./一个同步的文件.txt')
console.log('读取了:', data.toString())



// 📺 流式的读取 (适合读取频率较高 & 大文件的场景)
const rs = fs.createReadStream('./一个流式的文件.txt') //【🔋 第一步】建立通道
rs.on('data', chunk => { //【🔋 第二步】监听通道
	console.log(chunk.length) //54 bytes, 表示  0.0054kb 
	console.log('读取出了:', chunk.toString())
})

rs.on('end', chunk => {
	console.log('读取完毕')
})






// 复制文件 ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// 本质上是取出文件内容再复制到另一个文件

// 同步复制 (🚀占内存大, 适合复制小文件)
let newData = fs.readFileSync('./一个同步的文件.txt')
fs.writeFileSync('./新文件夹/流式新文件.txt', newData)



// 流式复制 (🚀占内存小, 适合复制大文件)
let rs2 = fs.createReadStream('./一个同步的文件.txt')
let newData2 = fs.createWriteStream('./一个同步的文件.txt')

rs2.on('data', chunk => {
	newData2.write(chunk)
})

rs2.on('end', chunk => {
	// 查看内存占用量
	console.log(process.memoryUsage().rss) // 36503552 byte 【除以】 1024 = X KB  【再除以】 1024 = X MB
})






// 重命名 & 移动文件 ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
fs.rename('./一个要被改名的文件.txt', './新文件夹/🚀新名字.txt', err => { //⚡️（旧路径）旧名字, （新路径）新名字, 回调函数
	if(err) {
		console.log(err)
		return
	}
	console.log('🎉 文件夹移动成功!')
}) 


